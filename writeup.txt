Offsets of the locations changed to include name in credits:
00118678 - 00118684
Value each offset now contains:
6a 6f 73 65 20 61 which spells out my name "jose a"
Original password: bg3rulz
The location of the password offset is: 0x7a6c7572336762/001070a2
How bypass password:
	In order to bypass the password I simply made it so that the check would not exist and used a NOP slide to get to the password accepted line within the program so that regardless of password entered will still call the correct function in order to destruct the ship.
In order to accomplish this I replaced all these lines:
	00104e6a
	00104e6b
	00104e6c
	00104e6d
	00104e6e
	00104e6f
	00104e71
	00104e72
	00104e73
	00104e74
	00104e75
	00104e76
		with NOP in order to not have anything happen and no password check to check if what is input is correct, I have uploaded this file as well in order to demonstrate that I did patch the instructions this way.
Project experience: 
	This project was a little difficult to complete as I am not the best when it comes to assembly code and being able to read it. On top of it this I was using Ghidra which I have never used before in order to attempt to solve this program. 
  This proved to be a hurdle since Ghidra has many options to analyze and search the program. I first found the boomboom variable and all its references but that continuously sent me to a dead end. Then after the professor gave us a hint that the password was set in plaintext. 
  I checked if Ghidra had any way to search for all the strings in the program and found that it in fact did have one after struggling for various days. I then noticed that one of the strings was an abbreviation for a game that he has brought up many times and that I personally play and tested it out and it worked as the password. 
  The next step of the program was to find a way to bypass the password check, which I found to be a little difficult given how Ghidra patching instructions was not very helpful at first, but once I realized that I could bypass the password with a NOP slide I replaced the instructions prior to the success call with NOP. 
  To find where the professor has his name I just used the search and replaced the bits next to it in order to place my name under his. The offsets and values changed are at the beginning of this file.
	To view the results of me finding the password refer to 478output.png, to view the results of me patching the instructions view Fixed pw.png, sst-x86_64 is only including my name, while sst-x86_64.5 is the one with the nop slide that will allow a user to input anything and be able to destruct the ship.
